<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qian&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.fengsq.com/"/>
  <updated>2019-12-18T09:14:58.748Z</updated>
  <id>https://blog.fengsq.com/</id>
  
  <author>
    <name>FengShiqian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一次让你搞懂Android应用签名</title>
    <link href="https://blog.fengsq.com/post/ApkSignature.html"/>
    <id>https://blog.fengsq.com/post/ApkSignature.html</id>
    <published>2019-12-11T02:05:32.000Z</published>
    <updated>2019-12-18T09:14:58.748Z</updated>
    
    <content type="html"><![CDATA[<p>相信大家一开始做安卓开发就知道apk需要签名，但是Android的签名是什么呢？<br></p><p>今天我们就一起来聊聊Android签名的前世今生。</p><a id="more"></a><h2 id="一、签名是什么？"><a href="#一、签名是什么？" class="headerlink" title="一、签名是什么？"></a>一、签名是什么？</h2><p>正如我们平时生活中办理业务、签合同等都需要本人的签名以证实身份。应用的签名，也是为了验证这个应用是否被篡改，是否是该应用的所有者发布的等。Android的证书通常是自签名的，也就是开发者可以自己创建，不需要向CA机构申请。系统认为某个包名的应用第一次安装时的证书就是合法的。签名有以下几个作用：</p><ol><li><strong>应用程序升级</strong>：相同包名的应用必须有相同的签名才能覆盖安装。各大应用市场通常也是通过你是否拥有应用正确的签名判断你是不是应用的所有者。</li><li><strong>应用程序模块化</strong>：Android系统可以允许同一个证书签名的多个应用程序在一个进程里运行，系统实际把他们作为一个单个的应用程序，此时就可以把我们的应用程序以模块的方式进行部署。</li><li><strong>代码或者数据共享</strong>：Android提供了基于签名的权限机制，一个应用程序可以为另一个以相同证书签名的应用程序公开自己的功能。</li><li><strong>安全性校验</strong>：使用第三方服务（如微信）会校验应用的签名，如果签名不对无法调用。自己App内的某些关键位置也可以增加签名校验（最好放在native中），签名不正确直接退出或报错，防止别人二次打包。</li></ol><p>任何一个APK都必须签名后才能安装到手机上。有人可能会说，我在AS中直接run的时候，并没有进行签名啊，其实这时候会默认使用一个debug签名，mac上debug签名的路径是<code>/Users/xxx/.android/debug.keystore</code>，windows在<code>C:\Users\xxx\.android\debug.keystore</code>。</p><p>debug.keystore信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Keystore name: &quot;debug.keystore&quot;</span><br><span class="line">Keystore password: &quot;android&quot;</span><br><span class="line">Key alias: &quot;androiddebugkey&quot;</span><br><span class="line">Key password: &quot;android&quot;</span><br><span class="line">CN: &quot;CN&#x3D;Android Debug,O&#x3D;Android,C&#x3D;US&quot;</span><br></pre></td></tr></table></figure><p>细心的同鞋可能会发现，在一台电脑上运行了一个程序到一个设备，换一台电脑运行到这个设备时无法直接覆盖安装，会提示先卸载原来的，正是由于两台电脑的debug签名是不同的，如果想要可以覆盖安装，可以配置debug时都使用同一个签名而不使用默认的，或者将一台电脑的debug.keystore拷贝到另一台电脑对应位置。</p><p>而Android 支持以下三种应用签名方案：</p><ol><li><strong>v1 方案</strong>：基于 JAR 签名。</li><li><strong>v2 方案</strong>：APK 签名方案 v2（在 Android 7.0 中引入）。</li><li><strong>v3 方案</strong>：APK 签名方案 v3（在 Android 9.0 中引入）。</li></ol><p>后面会对它们一一介绍。</p><h2 id="二、预备知识"><a href="#二、预备知识" class="headerlink" title="二、预备知识"></a>二、预备知识</h2><p>在开始介绍Android的签名之前，先简单普及三个知识点，在签名中会用到的技术。这里不做详细介绍，如果大家感兴趣，后面可以单独搞一篇。</p><h3 id="2-1-非对称加密算法"><a href="#2-1-非对称加密算法" class="headerlink" title="2.1 非对称加密算法"></a>2.1 非对称加密算法</h3><blockquote><p>非对称密钥加密算法需要一个公钥-私钥对，称为key pair。常用公钥加密算法是RSA和DSA。</p></blockquote><p>从功能上说，两个key 作用相同，用一个 key加密的消息，只能用另一个 key 解密，反之亦然。两个 key 的区别只在于谁拥有（知道）它：私钥只有 key pair 的生成者知道，公钥则公开。key pair的另一个特性是无法从一个key推算出另一个key。</p><h3 id="2-2-数字摘要"><a href="#2-2-数字摘要" class="headerlink" title="2.2 数字摘要"></a>2.2 数字摘要</h3><p>数字摘要算法是使用一个Hash函数对任意长度的输入数据进行处理，输出固定长度的数据，输出数据称为消息摘要。无法从消息摘要倒推出消息内容。常用的消息摘要算法是 MD5 和 SHA-1。</p><h3 id="2-3-数字签名"><a href="#2-3-数字签名" class="headerlink" title="2.3 数字签名"></a>2.3 数字签名</h3><blockquote><p>数字签名是只有信息的发送者才能产生的别人无法伪造的一段数字串，以证实信息的真实性。数字签名通过非对称加密技术和数字摘要技术实现。</p></blockquote><ol><li>生成 key pair</li><li>签名：对消息进行摘要获得其Hash值，用私钥加密消息Hash获得数字签名</li><li>验证：对消息进行摘要获得其Hash值，用公钥解开数字签名获得消息Hash，对两个Hash进行比对</li></ol><p>由于私钥无法伪造或从公钥推算出，因此，消息发送者必为私钥拥有者，由此确保了消息来源的真实性和不可否认性。如果消息在发送过程中损坏或被篡改，进行摘要后Hash值必定不一致，数字签名验证无法通过，由此确保了消息内容的完备性。</p><h2 id="三、v1-方案（jar-签名）"><a href="#三、v1-方案（jar-签名）" class="headerlink" title="三、v1 方案（jar 签名）"></a>三、v1 方案（jar 签名）</h2><blockquote><p>基于上面介绍的3个知识点，下面就来介绍Android最早使用的签名-jar签名</p></blockquote><h3 id="3-1-工具介绍"><a href="#3-1-工具介绍" class="headerlink" title="3.1 工具介绍"></a>3.1 工具介绍</h3><p>由于 apk 和 jar 实际上都是 zip 文件结构，所以Android早期的签名直接使用了jar包的签名方案，JDK 提供了 keytool 和 jarsigner 两个工具用来进行 Jar 包签名和验证。</p><ol><li>keytool 用来生成和管理 keystore。</li><li>jarsigner 读取 keystore，为 Jar 包进行数字签名，也可以对签名的 Jar 包进行验证。</li></ol><p><em>keystore 是一个数据文件，存储了 key pair 有关的2种数据：私钥和证书，而证书包含了公钥。整个 keystore 用一个密码进行保护，keystore 里面的每一对 key pair 单独用一个密码进行保护。每对 key pair 用一个 alias 进行指定，alias 不区分大小写。</em></p><h3 id="3-2-签名步骤"><a href="#3-2-签名步骤" class="headerlink" title="3.2 签名步骤"></a>3.2 签名步骤</h3><ol><li>生成签名文件（密钥库）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -keystore demo.jks -alias demo -validity 3650</span><br></pre></td></tr></table></figure><p>执行以上命令，按照提示一步步输入信息，就可以创建一个名为 demo.jks 的签名文件（密钥库），密钥的 alias 为 demo ，有效期3650天。</p><p>当然，用AS打包的过程中也可以使用图形化界面创建一个新的签名。<br><br><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/new-key-store.jpg" alt="image"></p><ol start="2"><li>进行数字签名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -keystore demo.jks -signedjar xxx_signed.apk xxx.apk demo</span><br></pre></td></tr></table></figure><p>以上命令就会用 demo.jks 为 xxx.apk 签名，签名后的文件为xxx_signed.apk</p><ol start="3"><li>验证签名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verify xxx_signed.apk</span><br></pre></td></tr></table></figure><p>验证一个已签名的 apk 文件，如果签名的 apk 文件没有被篡改过，那么就会显示已验证。否则，会抛出<code>SecurityException</code>，表明哪些文件没有通过验证。</p><p>还可以用<code>java.util.jar</code>和<code>java.securityAPI</code>以编程方式签名JAR，这里就不做介绍了。</p><h3 id="3-3-原理"><a href="#3-3-原理" class="headerlink" title="3.3 原理"></a>3.3 原理</h3><blockquote><p>jar 签名是如何校验文件的合法性呢？</p></blockquote><p>通过解压软件打开签名后的apk文件，就会发现里面包含了 dex 字节码文件，清单文件，资源文件等。结构就如下图所示，其中 META-INF/MANIFEST.MF 文件包含每个文件的摘要信息。<br></p><p><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/signed-apk.jpg" alt=""></p><p>可以看到我在图中圈出来了两个文件，他们就是在签名时生成的。</p><ol><li>签名文件 <code>META-INF/&lt;signer&gt;.SF</code>：包含MANIFEST中每个摘要项的摘要，使用私钥加密</li><li>签名块文件 <code>META-INF/&lt;signer&gt;.(RSA|DSA|EC)</code>：包含 .SF 文件的签名和来自密钥仓库的证书或证书链。其中证书包含了签名者的有关信息和 public key</li></ol><p><em>如果命令行中没有 -sigfile 选项，则上述的<signer>将是命令行中指定的别名的前 8 个字符，并全部被转换为大写；而<signer>.(RSA|DSA|EC)的扩展名，根据数字签名的类型RSA、DSA 或者 PGP 以及用于签名 JAR 的证书类型而有不同的扩展名。</signer></signer></em></p><p>这些文件的关系如下图：<br><br><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/Scheme1v2.png" alt=""></p><p>签名的过程就是获取MANIFEST文件中每一项的摘要，再用私钥加密后保存下来。校验签名的时候，首先对 jar 中每个文件进行摘要计算，然后与MANIFEST中已记录的摘要进行比较，来判断文件是否更改过。同时还要计算MANIFEST文件中每项的摘要，并与签名文件中的每一项（用公钥解密后）比较，以验证MANIFEST文件是否被修改过。</p><p><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/verify_sha.png" alt=""></p><h3 id="3-4-存在的问题"><a href="#3-4-存在的问题" class="headerlink" title="3.4 存在的问题"></a>3.4 存在的问题</h3><ol><li>正如上面介绍的，v1签名会校验 APK 中每个文件的合法性，但并不包含META-INF目录中的文件，而且也不能保护 APK 的某些部分，例如 ZIP 元数据。<br></li></ol><p><em>由于v1签名的这个问题出现的一些漏洞，如 <a href="https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures" target="_blank" rel="noopener">Janus 漏洞</a>、MasterKey 漏洞、“9695860”漏洞、“9950697”漏洞，感兴趣的朋友可以去查查看，看完后不禁感慨这些黑客真的是聪明。</em></p><ol start="2"><li>APK 验证程序必须解压所有已压缩的条目，而这需要花费更多时间和内存。</li></ol><p>ps：插播一条，也正是由于v1签名存在的第一个“问题”，在v2签名出现前，许多多渠道打包工具就是将渠道信息写入META-INF目录中的文件，或者是zip文件元数据来实现快速地多渠道打包。如 <a href="https://github.com/mcxiaoke/packer-ng-plugin/tree/v1.0.9" target="_blank" rel="noopener">PackerNg</a> ，将渠道信息写入zip文件元数据的注释部分，需要时从文件中读出，这样不会影响签名的校验，相比<code>productFlavors</code>大大提高了渠道包的打包速度。</p><h2 id="四、v2方案"><a href="#四、v2方案" class="headerlink" title="四、v2方案"></a>四、v2方案</h2><blockquote><p>正是为了解决v1签名存在的问题，Android 7.0 中引入了 APK 签名方案 v2</p></blockquote><h3 id="4-1-工具介绍"><a href="#4-1-工具介绍" class="headerlink" title="4.1 工具介绍"></a>4.1 工具介绍</h3><p>v1签名的工具是jdk提供的，在Android SDK Build Tool 24.0.3 及更高版本中提供了<code>apksigner</code>工具，可以使用此工具来为APK签名，apksigner默认是同时支持V1与V2的。详细介绍可以查看 <a href="https://developer.android.com/studio/command-line/apksigner" target="_blank" rel="noopener">官方文档-apksigner</a>（需要科学上网）</p><h3 id="4-2-签名步骤"><a href="#4-2-签名步骤" class="headerlink" title="4.2 签名步骤"></a>4.2 签名步骤</h3><ol><li>进行数字签名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apksigner sign --ks keystore.jks |</span><br><span class="line">      --key key.pk8 --cert cert.x509.pem</span><br><span class="line">      [signer_options] app-name.apk</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; demo      </span><br><span class="line">apksigner sign --ks demo.jks --ks-key-alias demo --out Demo_signed.apk Demo.apk</span><br></pre></td></tr></table></figure><ol start="2"><li>验证签名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apksigner verify [options] app-name.apk</span><br></pre></td></tr></table></figure><h3 id="4-3-原理"><a href="#4-3-原理" class="headerlink" title="4.3 原理"></a>4.3 原理</h3><p>与v1签名对压缩包内的部分文件进行保护不同，v2签名是一种全文件签名方案，使用 方案 v2 进行签名时，会在 APK 文件中插入一个 APK 签名分块，该分块位于“ZIP 中央目录”部分之前并紧邻该部分。在“APK 签名分块”内，v2 签名和签名者身份信息会存储在 APK 签名方案 v2 分块中。<br><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/apk-before-after-signing.png" alt="apk签名前和签名后"><br>此时APK包含以下4各部分：</p><ol><li>ZIP 条目的内容（从偏移量 0 处开始一直到“APK 签名分块”的起始位置）</li><li>APK 签名分块</li><li>ZIP 中央目录</li><li>ZIP 中央目录结尾</li></ol><p><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/apk-sections.png" alt="签名后APK4部分"></p><p>APK 签名方案 v2 负责保护第 1、3、4 部分的完整性，以及第 2 部分包含的“APK 签名方案 v2 分块”中的<code>signed data</code>分块的完整性。<code>signed data</code>分块是什么呢？这就要说说v2签名是怎么进行全文件的摘要计算。下图就展示了计算方式，这张图可以从下往上看。</p><p><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/apk-integrity-protection.png" alt="APK摘要计算方法"></p><ol><li>第1、3、4部分，每个部分都会被拆分成多个大小为 1 MB 的连续块（每个部分的最后一个块可能会短一些）。</li><li>计算每个小块（字节 0xa5 + 块长度 + 块内容）的摘要，即图中第二层“Digests of chunks”。</li><li>计算整体（字节 0xa5 + 块数量 + 每个块的摘要）的摘要。</li></ol><p>为什么要分成一个个小块分别计算而不直接计算整个文件的呢？是因为以分块的方式计算摘要，就可以通过并行处理来加快计算速度。</p><p>现在文件的摘要有了，那存储在哪呢？接下来就介绍APK的第2部分-APK Signing Block。</p><p>签名块的格式如下（所有数字字段均采用小端字节序）：</p><ol><li>size of block，以字节数（不含此字段）计 (uint64)</li><li>“ID-值”对序列：<ol><li>“ID-值”对的长度 (uint64)</li><li>ID (uint32)</li><li>value（可变长度：“ID-值”对的长度 - 4 个字节）</li></ol></li><li>size of block，以字节数计 - 与第一个字段相同 (uint64)</li><li>magic “APK Sig Block 42”（16 个字节）</li></ol><p>这里有一个乍看有点奇怪的地方，块的大小前后都存了一次，我的理解是：在解析 APK 时，由于ZIP前面的内容部分长度不确定，如果从前往后要找到签名块会比较困难。从后往前就会容易些：</p><ol><li>在文件末尾找到“ZIP 中央目录结尾”记录，然后从该记录中读取“中央目录”的起始偏移量。</li><li>如果“中央目录”前面是 magic 值-“APK Sig Block 42”，可以快速确定“中央目录”前方可能是“APK 签名分块”。</li><li>通过 size of block 值，可以高效地找到该分块在文件中的起始位置。</li></ol><p><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/find-sign-block.jpg" alt="查找签名块"></p><p>找到签名分块后就可以解析出其中的多个“ID-值”对，APK 的 v2 签名会存储为一个“ID-值”对，其中 ID 为 <code>0x7109871a</code>。当然，签名块中还可以存储后续可能出现的V3、V4 … Vn签名。在ID<code>0x7109871a</code>对应的值（v2分块）中就存储着前面计算出的摘要、X.509证书、公钥等等，v2分块的具体格式可以查看<a href="https://source.android.google.cn/security/apksigning/v2" target="_blank" rel="noopener">官方文档-APK 签名方案 v2</a>，在后面说到v3签名的时候会有张我画的结构图。</p><h3 id="4-4-防回滚保护"><a href="#4-4-防回滚保护" class="headerlink" title="4.4 防回滚保护"></a>4.4 防回滚保护</h3><p>APK 签名方案 v2 是在 Android 7.0 (Nougat) 中引入的，为了使 APK 可在 Android 6.0 (Marshmallow) 及更低版本的设备上安装，应先使用 JAR 签名功能对 APK 进行签名，然后再使用 v2 方案对其进行签名。</p><p>v2签名解决了v1签名无法保护部分文件内容的问题，所以在7.0及以上的系统，我们肯定是希望使用v2签名验证的。但是由于APK里也包含v1签名，某些攻击者就可以移除掉v2签名的部分，让系统只验证v1签名。为了防范此类攻击，带 v2 签名的 APK 如果还带 v1 签名，其 META-INF/*.SF 文件的主要部分中必须包含 X-Android-APK-Signed 属性。<br><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/x-android-apk-signed.jpg" alt="X-Android-APK-Signed 属性"></p><p>该属性的值是一组以英文逗号分隔的 APK 签名方案 ID（v2 方案的 ID 为 2）。在验证v1签名时，如果发现首选的签名方案是v2，但是APK不包含v2签名，则直接验证失败。由于 META-INF/*.SF 文件受 v1 签名保护，攻击者没法修改该文件中的X-Android-APK-Signed 属性。</p><h3 id="4-5-验证优先级"><a href="#4-5-验证优先级" class="headerlink" title="4.5 验证优先级"></a>4.5 验证优先级</h3><p><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/apk-v2-validation.png" alt=""><br><br>在7.0以下版本的平台，会忽略v2签名，只验证v1签名。在7.0及以上版本平台上，会判断如果有v2签名，则验证v2签名，如果没有，则验证v1签名。</p><h3 id="4-6-渠道包方案"><a href="#4-6-渠道包方案" class="headerlink" title="4.6 渠道包方案"></a>4.6 渠道包方案</h3><p>早期使用的在zip文件的注释部分写入渠道信息的方案，对于v2签名显然是不可行的，会导致签名验证不通过。但是v2签名引入了“签名块”，“签名块”中包含了很多“ID-值”对，我们可以添加一个自己的“ID-值”对，值就是渠道信息，要获取渠道的时候通过我们自定义的ID去找到就行了，v2签名后<code>walle</code>的新版本就是基于这个原理。</p><h2 id="五、v3方案"><a href="#五、v3方案" class="headerlink" title="五、v3方案"></a>五、v3方案</h2><p>生成签名的时，可以指定一个有效时间，这个时间默认为 25 年，并且 Google Play 也有硬性规定，上架的 App 签名有效期必须在 2033-10-22 之后。所以只要不是手欠修改了这个有效期，距离过期还早着呢，毕竟 Android 系统也才10年左右。</p><p>==但是，我实际测试了下官方模拟器、小米、vivo、华为荣耀，签名已失效依然可以正常安装。== 网上千篇一律都说失效签名无法安装，不知道他们有没有实际测过。咨询了厂商的开发者，目前只收到了vivo的回复，说是因为手机时间可以随意调，所以这个检验没有任何意义，他们废弃掉了，其他厂商不知道是不是也出于这个原因。</p><p>但是，保不准出现某个厂商会校验、或者某一天华米OV这些厂商也开始校验了、又或者公司收购等等需要更换签名的情况，需求是真实存在的。对于一款上架的 App，当签名失效之后，我们只能被迫换签名，此时因为签名校验无法通过，就会导致旧用户无法覆盖安装。这些历史用户唯一的选择，就是卸载后重新安装，这个代价显然是太大了。</p><p>不过不用担心，Google已经解决了这个问题，就是 Android 9.0 新增的 APK 签名v3。Android 9 支持 APK 密钥轮转，这使应用能够在 APK 更新过程中更改其签名密钥。</p><h3 id="5-1-v3分块"><a href="#5-1-v3分块" class="headerlink" title="5.1 v3分块"></a>5.1 v3分块</h3><p>v3签名并没有像v1→v2那样大的变化，可以算是v2的升级版。v3分块和v2分块一样存储在“APK签名分块”中，ID 为<code>0xf05368c0</code>，格式与v2相同，只是增加了支持的 SDK 版本（minSDK、maxSDK）和 Proof-of-rotation 信息。想了解完整的结构，可以查看<a href="https://source.android.google.cn/security/apksigning/v3" target="_blank" rel="noopener">官方文档-APK 签名方案 v3</a>。</p><p>Proof-of-rotation 结构位于<code>signed data</code>的“其他属性”中，ID 为<code>0x3ba06f8c</code>，其中包含一个单链表，每个节点都包含用于为之前版本的应用签名的签名证书。该单链表按版本排序，最旧的签名证书对应于根节点。系统会让每个节点中的证书为列表中的下一个证书签名，从而为每个新密钥提供证据来证明它应该像旧密钥一样可信。</p><p><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/Lineage.png" alt=""></p><p>为了让大家更直观的了解签名分块的结构，我画了张图。</p><p><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/APK-sign-block.jpg" alt=""></p><h3 id="5-2-验证优先级"><a href="#5-2-验证优先级" class="headerlink" title="5.2 验证优先级"></a>5.2 验证优先级</h3><p>同样，为了兼容老版本，在 Android 9 及更高版本中，可以根据 APK 签名方案 v3、v2 方案或 v1 方案验证 APK。较旧的平台会忽略 v3 签名并尝试验证 v2 签名，然后验证 v1。<br><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/apk-validation-process.png" alt=""></p><h3 id="5-3-轮替（更换）签名密钥"><a href="#5-3-轮替（更换）签名密钥" class="headerlink" title="5.3 轮替（更换）签名密钥"></a>5.3 轮替（更换）签名密钥</h3><p>下面就介绍下怎么更换签名，前提当然是你手上有老的签名和密码。</p><ol><li>创建支持密钥轮替的签名证书链（我自己的翻译，官方文档翻译成“签名证书沿袭”，感觉也是机翻的…）：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apksigner rotate --out &#x2F;path&#x2F;to&#x2F;new&#x2F;file --old-signer \</span><br><span class="line">      --ks release.jks --new-signer --ks release2.jks</span><br></pre></td></tr></table></figure><p>使用以上命令，设置输出的证书链文件名，然后会提示输入老签名密码，新签名密码，就会生成证书链文件。</p><p>如果要再次更换签名密钥，就再加一个–in，也就是之前的证书链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apksigner rotate --in &#x2F;path&#x2F;to&#x2F;existing&#x2F;lineage \</span><br><span class="line">      --out &#x2F;path&#x2F;to&#x2F;new&#x2F;file --old-signer --ks release2.jks \</span><br><span class="line">      --new-signer --ks release3.jks</span><br></pre></td></tr></table></figure><ol start="2"><li>签名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apksigner sign -lineage &#x2F;path&#x2F;to&#x2F;lineage -ks release.jks \</span><br><span class="line">      -next-signer -ks release2.jks -out signed.apk unsign.apk</span><br></pre></td></tr></table></figure><p>此时就要证书链，老证书，新证书都配置上。暂时还只知道命令行的方式签名，AS可视化的似乎还没有加上这个功能，不过这毕竟也是一个小众的需求。</p><ol start="3"><li>测试</li></ol><p>经测试，安装了release.jks签名的包，可以正常覆盖安装第二步生成的签名包，后续就可以直接覆盖安装仅用release1.jks签名的包了，说明签名确实更换成功了。==但是，用户并不一定都更新了轮替签名的包，可能跨版本升级，所以我觉得后续的所有包都得按照第2步的来打，不能仅用新签名release1.jks。== 除非能够确认已经没有用户在使用release.jks签名的包了。</p><h2 id="六、其它"><a href="#六、其它" class="headerlink" title="六、其它"></a>六、其它</h2><h3 id="6-1-遇到的一个异常"><a href="#6-1-遇到的一个异常" class="headerlink" title="6.1 遇到的一个异常"></a>6.1 遇到的一个异常</h3><p><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/v3SignatureError.jpg" alt="v3SignatureError"></p><p>上面这个异常出现在我公司某个版本临近上线时，9.0以下机型都可以正常安装，但是9.0及以上就无法安装。我当时也是很懵逼啊，这个版本没做什么改动啊。log显示是v3签名校验不通过，这就说得通了，9.0以上才会校验v3签名。又发现未加渠道号的没问题，加了渠道号就有问题了，当时渠道包是用 <a href="https://github.com/mcxiaoke/packer-ng-plugin" target="_blank" rel="noopener">packer-ng-plugin</a> 这个工具打的，那肯定就是这个工具还没有兼容v3签名。packer-ng-plugin 读写渠道号，其实使用的就是美团的 <a href="https://github.com/Meituan-Dianping/walle" target="_blank" rel="noopener">walle</a>，walle其实已经在今年2月份就修复了这个问题。原因就是Android 9 需要 apk 签名块的长度确保为 4096 的倍数。查看源码<code>/frameworks/base/core/java/android/util/apk/ApkVerityBuilder.java</code>可以找到下面这段校验代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHUNK_SIZE_BYTES = <span class="number">4096</span>;  <span class="comment">// Typical Linux block size</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">assertSigningBlockAlignedAndHasFullPages</span><span class="params">(SignatureInfo signatureInfo)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 省略部分代码……</span></span><br><span class="line">  <span class="keyword">if</span> ((signatureInfo.centralDirOffset - signatureInfo.apkSigningBlockOffset)</span><br><span class="line">          % CHUNK_SIZE_BYTES != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">              <span class="string">"Size of APK Signing Block is not a multiple of 4096: "</span></span><br><span class="line">              + (signatureInfo.centralDirOffset - signatureInfo.apkSigningBlockOffset));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里抛出的异常就是上面控制台显示的。so，使用最新的 walle 就行。</p><h3 id="6-2-忘记签名密码怎么办？"><a href="#6-2-忘记签名密码怎么办？" class="headerlink" title="6.2 忘记签名密码怎么办？"></a>6.2 忘记签名密码怎么办？</h3><p>网上说的通过查看Android Studio Log文件找回，亲测已经不行了，log中的password都是<code>******</code>。</p><p>推荐个工具 <a href="http://maxcamillo.github.io/android-keystore-password-recover/" target="_blank" rel="noopener">Android-keystore-password-recover</a>，提供了3种方式：</p><ol><li><strong>暴力破解</strong>：顾名思义，就是一个个试，最不推荐，实在没办法了在尝试这个。</li><li><strong>字典破解</strong>：提供一些可能的密码放到一个txt文件中，一个个尝试字典中的密码。</li><li><strong>智能字典破解</strong>：==推荐== 提供一些密码中可能的片段，放到一个txt文件中，它会将这些片段进行组合，并尝试出正确的密码。</li></ol><p>我自己曾经就通过类似的工具找到了忘记的密码，如果能想到的片段可能组合成正确的密码，几乎是一瞬间就试出来了。</p><p><img src="https://android-tech.oss-cn-shenzhen.aliyuncs.com/signature/keystore-password-recover.jpg" alt=""></p><h3 id="6-3-签名丢了怎么办？"><a href="#6-3-签名丢了怎么办？" class="headerlink" title="6.3 签名丢了怎么办？"></a>6.3 签名丢了怎么办？</h3><p>收拾收拾准备跑路吧！</p><p>保管好签名文件！保管好签名文件！保管好签名文件！重要的事情说三遍</p><p><br><br>最后，欢迎大家扫码关注我的公众号“安卓进阶”，我会不定期发一些自己的心得体会与大家分享，都是干货，肯定有你不知道的哟~！也欢迎加入QQ群交流。<br><img src="https://qianblog.oss-cn-shenzhen.aliyuncs.com/qrcode-qq-wechat.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信大家一开始做安卓开发就知道apk需要签名，但是Android的签名是什么呢？&lt;br&gt;&lt;/p&gt;&lt;p&gt;今天我们就一起来聊聊Android签名的前世今生。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://blog.fengsq.com/categories/Android/"/>
    
    
      <category term="Android" scheme="https://blog.fengsq.com/tags/Android/"/>
    
      <category term="签名" scheme="https://blog.fengsq.com/tags/%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>DataBinding</title>
    <link href="https://blog.fengsq.com/post/DataBinding.html"/>
    <id>https://blog.fengsq.com/post/DataBinding.html</id>
    <published>2016-04-19T08:47:32.000Z</published>
    <updated>2019-12-13T10:10:51.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Data-Binding是什么？"><a href="#一、Data-Binding是什么？" class="headerlink" title="一、Data Binding是什么？"></a>一、Data Binding是什么？</h1><p>2015年的Google IO大会上，Android团队发布的一个数据绑定框架。Data Binding实现了MVVM模型中的ViewModel（可参考Google官方的Sample <a href="https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding/" target="_blank" rel="noopener">todo-mvvm-databinding</a>），以后可以直接在 layout 布局 xml 文件中绑定数据，无需再<code>findViewById</code>然后手工设置数据了。其语法和使用方式和 JSP 中的 EL 表达式非常类似。</p><a id="more"></a><h1 id="二、配置环境"><a href="#二、配置环境" class="headerlink" title="二、配置环境"></a>二、配置环境</h1><p><code>Data Binding Library</code>是一个 support 库，支持Android 2.1+ 版本 (API 7+)。 要使用data binding需要gradle 1.5.0-alpha1以上。</p><p>现在AndroidStudio已经到3.0版本了，1.5以下的配置这里就不说了，以上版本直接在app module的<code>build.gradle</code>中配置：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ....</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps：即使依赖的库中使用了data binding，该module也必须在build.gradle中配置</p><h1 id="三、基本用法"><a href="#三、基本用法" class="headerlink" title="三、基本用法"></a>三、基本用法</h1><h2 id="3-1-布局文件"><a href="#3-1-布局文件" class="headerlink" title="3.1 布局文件"></a>3.1 布局文件</h2><p>最外层改为<code>&lt;layout&gt;</code>标签，<code>&lt;data&gt;</code>标签为需要绑定的数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:text</span>=<span class="string">"@&#123;user.firstName&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:text</span>=<span class="string">"@&#123;user.lastName&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-数据对象"><a href="#3-2-数据对象" class="headerlink" title="3.2 数据对象"></a>3.2 数据对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String firstName;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String lastName;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">       <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-绑定数据"><a href="#3-3-绑定数据" class="headerlink" title="3.3 绑定数据"></a>3.3 绑定数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">   MainActivityBinding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.main_activity);</span><br><span class="line">   <span class="comment">// or</span></span><br><span class="line">   <span class="comment">// MainActivityBinding binding = MainActivityBinding.inflate(getLayoutInflater());</span></span><br><span class="line">   User user = <span class="keyword">new</span> User(<span class="string">"Test"</span>, <span class="string">"User"</span>);</span><br><span class="line">   binding.setUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ListView 或者 RecyclerView 的Adapter中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ListItemBinding binding = ListItemBinding.inflate(layoutInflater, viewGroup, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">ListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><h2 id="3-4-绑定事件"><a href="#3-4-绑定事件" class="headerlink" title="3.4 绑定事件"></a>3.4 绑定事件</h2><p>如果你的数据对象中有两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickFriend</span><span class="params">(View view)</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickEnemy</span><span class="params">(View view)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"handlers"</span> <span class="attr">type</span>=<span class="string">"com.example.Handlers"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:text</span>=<span class="string">"@&#123;user.firstName&#125;"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:onClick</span>=<span class="string">"@&#123;user.isFriend ? handlers.onClickFriend : handlers.onClickEnemy&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:text</span>=<span class="string">"@&#123;user.lastName&#125;"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:onClick</span>=<span class="string">"@&#123;user.isFriend ? handlers.onClickFriend : handlers.onClickEnemy&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者也可以使用类似lambda表达式的方式设置点击事件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"登录"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:onClick</span>=<span class="string">"@&#123;() -&gt; viewModel.login()&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>viewModel</code>为绑定的对象，点击时将会调用<code>viewModel</code>中的<code>login()</code>方法。</p><h1 id="四、详细说明"><a href="#四、详细说明" class="headerlink" title="四、详细说明"></a>四、详细说明</h1><h2 id="4-1-导包"><a href="#4-1-导包" class="headerlink" title="4.1 导包"></a>4.1 导包</h2><p>布局中需要用到的类都需要导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:text</span>=<span class="string">"@&#123;user.lastName&#125;"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:visibility</span>=<span class="string">"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>像java一样，<code>java.lang.*</code> 自动导入，可以直接使用</p><p>当存在同名的类时，其中一个可以使用别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.real.estate.View"</span> <span class="attr">alias</span>=<span class="string">"Vista"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>导入类还可以用于在表达式中引用静态属性和方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.MyStringUtils"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:text</span>=<span class="string">"@&#123;MyStringUtils.capitalize(user.lastName)&#125;"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-变量"><a href="#4-2-变量" class="headerlink" title="4.2 变量"></a>4.2 变量</h2><p>自动生成的binding类会为每个声明的变量生成setter和getter方法，例如在<code>layout</code>中有<code>userName</code>这个变量：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"userName"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"String"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--...--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在其对应的DataBinding类中，就有<code>binding.setUserName(&quot;zhangsan&quot;)</code>这个方法。<br>在调用setter方法之前变量的值为java中对应类型的默认值，如上面是<code>userName</code>默认值就是<code>null</code>。<br>当表达式中需要使用时，会自动生成一个名为“context”的变量，“context”的值是由根布局的<code>getContext()</code>获得，如果手动声明了一个名为“context”的变量，默认的会被覆盖。</p><h2 id="4-3-自定义Binding类名"><a href="#4-3-自定义Binding类名" class="headerlink" title="4.3 自定义Binding类名"></a>4.3 自定义Binding类名</h2><p>默认Binding类会根据布局文件名自动生成，放在module包下的databinding包中，如布局文件<code>contact_item.xml</code>会自动生成ContactItemBinding，如果module包名是<code>com.example.my.app</code>，这个类将被放在<code>com.example.my.app.databinding</code>下。通过class属性，可以修改Binding类的类名和所在包。</p><ul><li><p>databinding包下，类名为ContactItem</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">"ContactItem"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>module包下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".ContactItem"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>指定包名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">"com.example.ContactItem"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-4-Includes"><a href="#4-4-Includes" class="headerlink" title="4.4 Includes"></a>4.4 Includes</h2><p>使用include时，需要将变量传递到被包含的布局中，下面例子中 <code>name.xml</code> 和 <code>contact.xml</code> 中必须有user变量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:bind</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/name"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">bind:user</span>=<span class="string">"@&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/contact"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">bind:user</span>=<span class="string">"@&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Data binding不支持<code>&lt;merge&gt;</code>下直接的子元素使用include，比如下面的就不支持：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:bind</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">merge</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/name"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">bind:user</span>=<span class="string">"@&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/contact"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">bind:user</span>=<span class="string">"@&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="五、表达式"><a href="#五、表达式" class="headerlink" title="五、表达式"></a>五、表达式</h1><h2 id="5-1-和Java中一样的"><a href="#5-1-和Java中一样的" class="headerlink" title="5.1 和Java中一样的"></a>5.1 和Java中一样的</h2><p>以下表达式和java的一样，注意部分符号需要转义，如<code>&amp;</code>应写成<code>&amp;amp;</code>，其他需要转义的符号可自行百度。</p><ul><li>算术表达式 <code>+ - / * %</code></li><li>字符串连接 <code>+</code></li><li>逻辑运算符 <code>&amp;&amp; ||</code></li><li>位运算符 <code>&amp; | ^</code></li><li>一元运算符 <code>+ - ! ~</code></li><li>位移运算符 <code>&gt;&gt; &gt;&gt;&gt; &lt;&lt;</code></li><li>关系运算符 <code>== &gt; &lt; &gt;= &lt;=</code></li><li><code>instanceof</code></li><li>分组 <code>()</code></li><li>字面值 - 字符, 字符串, 数字, <code>null</code></li><li>类型转换</li><li>方法调用</li><li>访问成员变量</li><li>访问数组 <code>[]</code></li><li>三元运算符 <code>?:</code></li></ul><p>例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;String.valueOf(index + 1)&#125;"</span><br><span class="line">android:visibility="@&#123;age <span class="tag">&lt; <span class="attr">13</span> ? <span class="attr">View.GONE</span> <span class="attr">:</span> <span class="attr">View.VISIBLE</span>&#125;"</span></span><br><span class="line"><span class="tag"><span class="attr">android:transitionName</span>=<span class="string">'@&#123;"image_" + id&#125;'</span></span></span><br></pre></td></tr></table></figure><h2 id="5-2-比起Java缺少的"><a href="#5-2-比起Java缺少的" class="headerlink" title="5.2 比起Java缺少的"></a>5.2 比起Java缺少的</h2><p>java中可以使用而这里不能使用的</p><ul><li><code>this</code></li><li><code>super</code></li><li><code>new</code></li><li>Explicit generic invocation</li></ul><h2 id="5-3-判断非空运算符"><a href="#5-3-判断非空运算符" class="headerlink" title="5.3 判断非空运算符"></a>5.3 判断非空运算符</h2><p>当表达式左边不为null时使用左边的值，如果为null使用右边的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;user.displayName ?? user.lastName&#125;"</span><br></pre></td></tr></table></figure><p>等效于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;user.displayName != null ? user.displayName : user.lastName&#125;"</span><br></pre></td></tr></table></figure><h2 id="5-4-避免了NullPointerException"><a href="#5-4-避免了NullPointerException" class="headerlink" title="5.4 避免了NullPointerException"></a>5.4 避免了<code>NullPointerException</code></h2><p>生成的data binding代码会自动检查空值，避免空指针。例如表达式<code>@{user.name}</code>，如果<code>user</code>是<code>null</code>，<code>user.name</code>将使用默认值<code>null</code>，<code>user.age</code>将使用默认值0。</p><h2 id="5-5-集合（Collections）"><a href="#5-5-集合（Collections）" class="headerlink" title="5.5 集合（Collections）"></a>5.5 集合（<code>Collections</code>）</h2><blockquote><p>集合使用泛型时小于号<code>&lt;</code>需要用<code>&amp;lt;</code>代替</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.util.SparseArray"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"java.util.Map"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"java.util.List"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">type</span>=<span class="string">"List<span class="symbol">&amp;lt;</span>String&gt;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"sparse"</span> <span class="attr">type</span>=<span class="string">"SparseArray<span class="symbol">&amp;lt;</span>String&gt;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"map"</span> <span class="attr">type</span>=<span class="string">"Map<span class="symbol">&amp;lt;</span>String, String&gt;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">type</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">type</span>=<span class="string">"String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line">android:text="@&#123;list[index]&#125;"</span><br><span class="line">…</span><br><span class="line">android:text="@&#123;sparse[index]&#125;"</span><br><span class="line">…</span><br><span class="line">android:text="@&#123;map[key]&#125;"</span><br></pre></td></tr></table></figure><p>键值为字符串时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:text='@&#123;map["firstName"]&#125;' <span class="comment">&lt;!-- 边上是单引号 --&gt;</span></span><br><span class="line">android:text="@&#123;map[`firstName`&#125;" <span class="comment">&lt;!-- 中间是反单引号（数字键1左边） --&gt;</span></span><br><span class="line">android:text="@&#123;map[<span class="symbol">&amp;quot;</span>firstName<span class="symbol">&amp;quot;</span>]&#125;"</span><br></pre></td></tr></table></figure><h2 id="5-6-资源文件（Resources）"><a href="#5-6-资源文件（Resources）" class="headerlink" title="5.6 资源文件（Resources）"></a>5.6 资源文件（<code>Resources</code>）</h2><ol><li><p>直接在表达式中使用resources，@string/xxx会被解析成String，@drawable/xxx会被解析成Drawable等等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:padding="@&#123;large? @dimen/largePadding : @dimen/smallPadding&#125;"</span><br></pre></td></tr></table></figure></li><li><p>格式化带参数的字符串</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;@string/name(name)&#125;"</span><br><span class="line">android:text="@&#123;@string/name_and_gender(name, gender)&#125;"</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- s是字符串，d是整数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>姓名：%s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"name_and_gender"</span>&gt;</span>姓名：%1$s；性别：%2$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>格式化带参数的plural，使用较少，这里不做过多解释</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Have an orange</span><br><span class="line">Have %d oranges</span><br><span class="line"></span><br><span class="line">android:text="@&#123;@plurals/orange(orangeCount, orangeCount)&#125;"</span><br></pre></td></tr></table></figure></li><li><p>有些<code>resource</code>必须明确指出类型</p><table><thead><tr><th align="left">类型</th><th align="left">普通引用</th><th align="left">表达式引用</th></tr></thead><tbody><tr><td align="left">String[]</td><td align="left">@array</td><td align="left">@stringArray</td></tr><tr><td align="left">int[]</td><td align="left">@array</td><td align="left">@intArray</td></tr><tr><td align="left">TypedArray</td><td align="left">@array</td><td align="left">@typedArray</td></tr><tr><td align="left">Animator</td><td align="left">@animator</td><td align="left">@animator</td></tr><tr><td align="left">StateListAnimator</td><td align="left">@animator</td><td align="left">@stateListAnimator</td></tr><tr><td align="left">color int</td><td align="left">@color</td><td align="left">@color</td></tr><tr><td align="left">ColorStateList</td><td align="left">@color</td><td align="left">@colorStateList</td></tr></tbody></table><p>sample</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;@stringArray/genders[1]&#125;"</span><br><span class="line">android:text="@&#123;String.valueOf(@intArray/ages[2])&#125;"</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">name</span>=<span class="string">"genders"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>男<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>女<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">name</span>=<span class="string">"ages"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>11<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>12<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>13<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="六、数据对象"><a href="#六、数据对象" class="headerlink" title="六、数据对象"></a>六、数据对象</h1><p>任何一个简单的Java对象（POJO）都可以用来绑定，但是修改一个POJO不能够触发UI更新。<br>当<code>Observable objects</code>, <code>Observable fields</code>, 和 <code>Observable collections</code> 这3种数据对象绑定到UI，并且数据改变时UI会自动更新</p><h2 id="6-1-Observable-Objects"><a href="#6-1-Observable-Objects" class="headerlink" title="6.1 Observable Objects"></a>6.1 Observable Objects</h2><p>实现 <code>android.databinding.Observable</code> 接口。为了方便，Android提供了基类<code>BaseObservable</code>，实现了监听器的注册机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String firstName;</span><br><span class="line">   <span class="keyword">private</span> String lastName;</span><br><span class="line">   <span class="meta">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">       notifyPropertyChanged(BR.firstName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">       notifyPropertyChanged(BR.lastName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Bindable</code> 注解编译时在 <code>BR</code> 中生成一个entry。 BR是在编译时生成在module的一个类，功能与R.java类似。</p><h2 id="6-2-ObservableFields"><a href="#6-2-ObservableFields" class="headerlink" title="6.2 ObservableFields"></a>6.2 ObservableFields</h2><p>属性较少时可以使用<code>ObservableField</code>，包含<code>ObservableBoolean</code>, <code>ObservableByte</code>, <code>ObservableChar</code>, <code>ObservableShort</code>, <code>ObservableInt</code>, <code>ObservableLong</code>, <code>ObservableFloat</code>, <code>ObservableDouble</code>, 和 <code>ObservableParcelable</code>，简单的POJO就可以实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; firstName = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; lastName = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableInt age = <span class="keyword">new</span> ObservableInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问值时使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.firstName.set(<span class="string">"Google"</span>);</span><br><span class="line"><span class="keyword">int</span> age = user.age.get();</span><br></pre></td></tr></table></figure><p>这也是我在实际使用时常用的一种方式，在ViewModel中定义需要绑定的数据。</p><h2 id="6-3-Observable-Collections"><a href="#6-3-Observable-Collections" class="headerlink" title="6.3 Observable Collections"></a>6.3 Observable Collections</h2><h3 id="6-3-1-ObservableArrayMap（当key是引用类型时）"><a href="#6-3-1-ObservableArrayMap（当key是引用类型时）" class="headerlink" title="6.3.1 ObservableArrayMap（当key是引用类型时）"></a>6.3.1 ObservableArrayMap（当key是引用类型时）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayMap&lt;String, Object&gt; user = <span class="keyword">new</span> ObservableArrayMap&lt;&gt;();</span><br><span class="line">user.put(<span class="string">"firstName"</span>, <span class="string">"Google"</span>);</span><br><span class="line">user.put(<span class="string">"lastName"</span>, <span class="string">"Inc."</span>);</span><br><span class="line">user.put(<span class="string">"age"</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;data&gt; xml</span><br><span class="line">    &lt;import type&#x3D;&quot;android.databinding.ObservableMap&quot;&#x2F;&gt;</span><br><span class="line">    &lt;variable name&#x3D;&quot;user&quot; type&#x3D;&quot;ObservableMap&lt;String, Object&gt;&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;data&gt;</span><br><span class="line">…</span><br><span class="line">&lt;TextView</span><br><span class="line">   android:text&#x3D;&#39;@&#123;user[&quot;lastName&quot;]&#125;&#39;</span><br><span class="line">   android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">   android:layout_height&#x3D;&quot;wrap_content&quot;&#x2F;&gt;</span><br><span class="line">&lt;TextView</span><br><span class="line">   android:text&#x3D;&#39;@&#123;String.valueOf(1 + (Integer)user[&quot;age&quot;])&#125;&#39;</span><br><span class="line">   android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">   android:layout_height&#x3D;&quot;wrap_content&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="6-3-2-ObservableArrayList（当key是整数时）"><a href="#6-3-2-ObservableArrayList（当key是整数时）" class="headerlink" title="6.3.2 ObservableArrayList（当key是整数时）"></a>6.3.2 ObservableArrayList（当key是整数时）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayList&lt;Object&gt; user = <span class="keyword">new</span> ObservableArrayList&lt;&gt;();</span><br><span class="line">user.add(<span class="string">"Google"</span>);</span><br><span class="line">user.add(<span class="string">"Inc."</span>);</span><br><span class="line">user.add(<span class="number">17</span>);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.databinding.ObservableList"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.my.app.Fields"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"ObservableList<span class="symbol">&amp;lt;</span>Object&gt;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:text</span>=<span class="string">'@&#123;user[Fields.LAST_NAME]&#125;'</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:text</span>=<span class="string">'@&#123;String.valueOf(1 + (Integer)user[Fields.AGE])&#125;'</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="七、生成-Binding"><a href="#七、生成-Binding" class="headerlink" title="七、生成 Binding"></a>七、生成 Binding</h1><p>生成的binding类引用了layout中的View，就如前面说的，Binding的类名和包名都可以定制，生成的binding类都继承自<code>ViewDataBinding</code>。</p><h2 id="7-1-创建"><a href="#7-1-创建" class="headerlink" title="7.1 创建"></a>7.1 创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflater);</span><br><span class="line">MyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflater, viewGroup, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>如果布局通过其他方式创建，也可以调用下面方法来绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyLayoutBinding binding = MyLayoutBinding.bind(viewRoot);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ViewDataBinding binding = DataBindingUtil.inflate(LayoutInflater, layoutId, parent, attachToParent);</span><br><span class="line">ViewDataBinding binding = DataBindingUtil.bindTo(viewRoot, layoutId);</span><br></pre></td></tr></table></figure><h2 id="7-2-带ID的View"><a href="#7-2-带ID的View" class="headerlink" title="7.2 带ID的View"></a>7.2 带ID的View</h2><p>如果布局中某个View设置了id，则生成的binding类中会包含：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TextView firstName;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TextView lastName;</span><br></pre></td></tr></table></figure><p>使用时直接调用 <code>binding.firstName</code></p><h2 id="7-3-ViewStubs"><a href="#7-3-ViewStubs" class="headerlink" title="7.3 ViewStubs"></a>7.3 ViewStubs</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ViewStub</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/view_stub"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout</span>=<span class="string">"@layout/view_stub"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">...</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_view_stub);</span><br><span class="line">binding.viewStub.setOnInflateListener(<span class="keyword">new</span> ViewStub.OnInflateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInflate</span><span class="params">(ViewStub stub, View inflated)</span> </span>&#123;</span><br><span class="line">        ViewStubBinding binding = DataBindingUtil.bind(inflated);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"fee"</span>, <span class="string">"lang"</span>);</span><br><span class="line">        binding.setUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="7-4-高级用法"><a href="#7-4-高级用法" class="headerlink" title="7.4 高级用法"></a>7.4 高级用法</h2><h3 id="7-5-动态变量"><a href="#7-5-动态变量" class="headerlink" title="7.5 动态变量"></a>7.5 动态变量</h3><p>以 RecyclerView 为例，Adapter 的 DataBinding 需要动态生成，因此我们可以在 onCreateViewHolder 的时候创建这个 DataBinding，然后在 onBindViewHolder 中获取这个 DataBinding。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BindingHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    ViewDataBinding binding = DataBindingUtil.bind(LayoutInflater.from(parent.getContext())</span><br><span class="line">            .inflate(layoutId, parent, <span class="keyword">false</span>));</span><br><span class="line">    BindingHolder bindingHolder = <span class="keyword">new</span> BindingHolder(binding.getRoot());</span><br><span class="line">    bindingHolder.setBinding(binding);</span><br><span class="line">    <span class="keyword">return</span> bindingHolder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BindingHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> T item = mItems.get(position);</span><br><span class="line">   holder.getBinding().setVariable(BR.item, item);</span><br><span class="line">   <span class="comment">// 当一个变量改变时，binding会在下一帧时改变UI，需要立刻执行，可以使用executePendingBindings()方法。</span></span><br><span class="line">   holder.getBinding().executePendingBindings();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ViewDataBinding binding;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BindingHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewDataBinding <span class="title">getBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBinding</span><span class="params">(ViewDataBinding binding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.binding = binding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、属性设置"><a href="#八、属性设置" class="headerlink" title="八、属性设置"></a>八、属性设置</h1><p>当一个绑定的值改变时，可以指定调用哪个方法来设置值</p><h2 id="8-1-默认调用set方法"><a href="#8-1-默认调用set方法" class="headerlink" title="8.1 默认调用set方法"></a>8.1 默认调用set方法</h2><p>没有配置自定义属性，data binding会自动找到对应的<code>setAttribute</code>方法（命名空间无所谓），所以一些控件如果已经存在了<code>setXxx()</code>方法，可以直接在布局中通过这种方式设置，不需要添加自定义属性。注意表达式的返回值，必要的时候进行类型转换。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:scrimColor</span>=<span class="string">"@&#123;@color/scrim&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:drawerListener</span>=<span class="string">"@&#123;fragment.drawerListener&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-2-重命名set方法"><a href="#8-2-重命名set方法" class="headerlink" title="8.2 重命名set方法"></a>8.2 重命名set方法</h2><p>如果不想调用根据名字匹配的setter，可以通过<code>BindingMethods</code>注解重新匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingMethods</span>(&#123;</span><br><span class="line">       <span class="meta">@BindingMethod</span>(type = <span class="string">"android.widget.ImageView"</span>,</span><br><span class="line">                      attribute = <span class="string">"android:tint"</span>,</span><br><span class="line">                      method = <span class="string">"setImageTintList"</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通常开发者不需要重命名setters</p><h2 id="8-3-自定义Setters"><a href="#8-3-自定义Setters" class="headerlink" title="8.3 自定义Setters"></a>8.3 自定义Setters</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:paddingLeft"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPaddingLeft</span><span class="params">(View view, <span class="keyword">int</span> padding)</span> </span>&#123;</span><br><span class="line">   view.setPadding(padding,</span><br><span class="line">                   view.getPaddingTop(),</span><br><span class="line">                   view.getPaddingRight(),</span><br><span class="line">                   view.getPaddingBottom());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以接收多个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter</span>(&#123;<span class="string">"bind:imageUrl"</span>, <span class="string">"bind:error"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(ImageView view, String url, Drawable error)</span> </span>&#123;</span><br><span class="line">   Picasso.with(view.getContext()).load(url).error(error).into(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">app:imageUrl</span>=<span class="string">"@&#123;venue.imageUrl&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">app:error</span>=<span class="string">"@&#123;@drawable/venueError&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这个适配器会在imageUrl和error都在ImageView中设置，imageUrl是字符串，error是drawable时调用。</p><p>事件适配器必须使用带有一个抽象方法的接口或抽象类，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onLayoutChange"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOnLayoutChangeListener</span><span class="params">(View view, View.OnLayoutChangeListener oldValue,</span></span></span><br><span class="line"><span class="function"><span class="params">       View.OnLayoutChangeListener newValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.removeOnLayoutChangeListener(oldValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.addOnLayoutChangeListener(newValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个listener有多个方法时，必须分成多个listener。比如<code>View.OnAttachStateChangeListener</code>有两个方法：<code>onViewAttachedToWindow()</code> 和 <code>onViewDetachedFromWindow()</code>，就必须创建两个接口来区分他们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnViewDetachedFromWindow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnViewAttachedToWindow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为改变一个listener经常会影响另一个，所以我们需要有3个不同的绑定适配器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onViewAttachedToWindow"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, OnViewAttachedToWindow attached)</span> </span>&#123;</span><br><span class="line">    setListener(view, <span class="keyword">null</span>, attached);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onViewDetachedFromWindow"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, OnViewDetachedFromWindow detached)</span> </span>&#123;</span><br><span class="line">    setListener(view, detached, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BindingAdapter</span>(&#123;<span class="string">"android:onViewDetachedFromWindow"</span>, <span class="string">"android:onViewAttachedToWindow"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, <span class="keyword">final</span> OnViewDetachedFromWindow detach,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> OnViewAttachedToWindow attach)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.HONEYCOMB_MR1) &#123;</span><br><span class="line">        <span class="keyword">final</span> OnAttachStateChangeListener newListener;</span><br><span class="line">        <span class="keyword">if</span> (detach == <span class="keyword">null</span> &amp;&amp; attach == <span class="keyword">null</span>) &#123;</span><br><span class="line">            newListener = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newListener = <span class="keyword">new</span> OnAttachStateChangeListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (attach != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        attach.onViewAttachedToWindow(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (detach != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        detach.onViewDetachedFromWindow(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,</span><br><span class="line">                newListener, R.id.onAttachStateChangeListener);</span><br><span class="line">        <span class="keyword">if</span> (oldListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.removeOnAttachStateChangeListener(oldListener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.addOnAttachStateChangeListener(newListener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子比普通的稍微复杂一些，因为View使用add和remove来操作listener，不使用set方法来操作<code>View.OnAttachStateChangeListener</code>。 <code>android.databinding.adapters.ListenerUtil</code> 类可以帮助跟踪以前的监听器，以便它们可以在绑定Adaper中删除。</p><p>通过使用<code>@TargetApi(VERSION_CODES.HONEYCOMB_MR1)</code>注释<code>OnViewDetachedFromWindow</code>和<code>OnViewAttachedToWindow</code>，数据绑定代码生成器知道监听器应该只在运行于Honeycomb MR1和新设备（由addOnAttachStateChangeListener(View.OnAttachStateChangeListener)支持的相同版本）上时生成。</p><h1 id="九、转换器（Converters）"><a href="#九、转换器（Converters）" class="headerlink" title="九、转换器（Converters）"></a>九、转换器（Converters）</h1><h2 id="9-1-Object转换器"><a href="#9-1-Object转换器" class="headerlink" title="9.1 Object转换器"></a>9.1 Object转换器</h2><p>当binding表达式返回一个对象时，会从上面说的三种：默认、重命名、自定义setters中选择一个，这个对象会被转换成选择的setter的参数类型。<br>这方便了用ObservableMaps保存数据，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:text</span>=<span class="string">'@&#123;userMap["lastName"]&#125;'</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>userMap</code> 返回了一个 Object ，这个 Object 将会自动转换成 <code>setText(CharSequence)</code>的参数类型。当参数类型不明确时，开发者需要在表达式中进行转换。</p><h2 id="9-2-自定义转换器"><a href="#9-2-自定义转换器" class="headerlink" title="9.2 自定义转换器"></a>9.2 自定义转换器</h2><p>有时特殊的类型需要自动转换。比如，当设置背景时：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:background</span>=<span class="string">"@&#123;isError ? @color/red : @color/white&#125;"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这里，背景是一个 <code>Drawable</code>，但是颜色是一个整数，需要把 <code>int</code> 转换成 <code>ColorDrawable</code>，可以使用带有 <code>BindingConversion</code> 注解的一个静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingConversion</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorDrawable <span class="title">convertColorToDrawable</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ColorDrawable(color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note：不要将上面的和以下混淆</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:background</span>=<span class="string">"@&#123;isError ? @drawable/error : @color/white&#125;"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、Data-Binding是什么？&quot;&gt;&lt;a href=&quot;#一、Data-Binding是什么？&quot; class=&quot;headerlink&quot; title=&quot;一、Data Binding是什么？&quot;&gt;&lt;/a&gt;一、Data Binding是什么？&lt;/h1&gt;&lt;p&gt;2015年的Google IO大会上，Android团队发布的一个数据绑定框架。Data Binding实现了MVVM模型中的ViewModel（可参考Google官方的Sample &lt;a href=&quot;https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;todo-mvvm-databinding&lt;/a&gt;），以后可以直接在 layout 布局 xml 文件中绑定数据，无需再&lt;code&gt;findViewById&lt;/code&gt;然后手工设置数据了。其语法和使用方式和 JSP 中的 EL 表达式非常类似。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://blog.fengsq.com/categories/Android/"/>
    
    
      <category term="Android" scheme="https://blog.fengsq.com/tags/Android/"/>
    
      <category term="MVVM" scheme="https://blog.fengsq.com/tags/MVVM/"/>
    
      <category term="Binding" scheme="https://blog.fengsq.com/tags/Binding/"/>
    
  </entry>
  
</feed>
